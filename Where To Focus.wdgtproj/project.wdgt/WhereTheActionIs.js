// This file was generated by Dashcode from Apple Inc.
// You may edit this file to customize your Dashboard widget.

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    setupParts();
    
    // Gets stored preferences and makes the back controls match
    showOnlyActiveContexts = 
            widget.preferenceForKey(createInstancePreferenceKey("showOnlyActiveContexts"));
    if (showOnlyActiveContexts == undefined) {
        showOnlyActiveContexts = true;
        widget.setPreferenceForKey(showOnlyActiveContexts, 
                                    createInstancePreferenceKey("showOnlyActiveContexts"));
    }
    var showOnlyActiveContextsCheckbox = document.getElementById("showOnlyActiveContextsButton");
    showOnlyActiveContextsCheckbox.checked = showOnlyActiveContexts;
    
    includeChildrensTotalsInParents =
        widget.preferenceForKey(createInstancePreferenceKey("includeChildrensTotalsInParents"));
    if (includeChildrensTotalsInParents == undefined) {
        includeChildrensTotalsInParents = true;
        widget.setPreferenceForKey(includeChildrensTotalsInParents, 
                                    createInstancePreferenceKey("includeChildrensTotalsInParents"));
    }
    var includeChildrensTotalsInParentsCheckbox = 
        document.getElementById("includeChildrensTotalsInParentsButton");
    includeChildrensTotalsInParentsCheckbox.checked = includeChildrensTotalsInParents;
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
	refreshDataFromOF();
	setHoverText("");
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }

    // Delays the update until the transition is completed
    setTimeout('refreshDataFromOF();', 1000);
}

//
// Function: tellOFtoShowContext(contextHierarchy)
// Asks OmniFocus to display the given context
//
function tellOFtoShowContext(contextHierarchy)
{
	if (scriptCommand == null) {
        // Script args:
        //     contextHierarchy
        //     showOnlyActiveContexts
        var commandRoot = "/usr/bin/osascript ShowContext.scpt '";
		scriptCommand = widget.system(commandRoot 
                                        + contextHierarchy + "' "
                                        + showOnlyActiveContexts, showContextCompleted);
    }
}

function showContextCompleted()
{
	scriptCommand = null;
    widget.openApplication("com.omnigroup.OmniFocus");
}

//
// Function: refreshDataFromOF()
// Requests data from OmniFocus
//
function refreshDataFromOF(event)
{
	if (scriptCommand == null) {
        showLoadingStamp();
        // Script args:
        //     showOnlyActiveContexts
        //     includeChildrensTotalsInParents
        var commandRoot = "/usr/bin/osascript GetCountsOfAvailableActions.scpt ";
		scriptCommand = widget.system(commandRoot 
                                        + showOnlyActiveContexts + ' ' 
                                        + includeChildrensTotalsInParents, refreshScriptCompleted);
	}
}

//
// Function: refreshScriptCompleted()
// Called asynchronously when system call to get counts from OF completes.
//
function refreshScriptCompleted()
{
	if (scriptCommand != null) {
		var textArea = document.getElementById("textarea");
		var contextsAndCounts = scriptCommand.outputString;
        var launchBox = document.getElementById("launchBox");
        if (contextsAndCounts.match(omniFocusNotRunningResponse)) {
            launchBox.style.visibility="visible";
        } else {
            launchBox.style.visibility="hidden";
            listController.data(contextsAndCounts);
        }
        hideLoadingStamp();
		scriptCommand = null;
	}
}

function fadeLoadingStampToOpacity(targetOpacity)
{
    var loadingStamp = document.getElementById("loadingStamp");
    var fader = function(a,c,s,f) { loadingStamp.style.opacity = c; };
    if (loadStampAnimator != null) {
        loadStampAnimator.stop();
    }
    // FIXME: Visibility tap dance is to keep mouse over events happy for the list underneath
    if (targetOpacity >= 0.05 && loadingStamp.style.visibility == "hidden") {
        loadingStamp.style.visibility = "visible";
        loadingStamp.style.opacity = 0.0;
    }
    var initialOpacity = +loadingStamp.style.opacity;
    loadStampAnimator = new AppleAnimator(500,13,initialOpacity,targetOpacity, fader);
    if (targetOpacity < 0.05) {
        loadStampAnimator.oncomplete = function() { loadingStamp.style.visibility = "hidden"; }
    }
    loadStampAnimator.start();
}

function showLoadingStamp() 
{
    fadeLoadingStampToOpacity(1.0)
}

function hideLoadingStamp() 
{
    fadeLoadingStampToOpacity(0.0)
}

function setHoverText(text) 
{
    var hoverText = document.getElementById("hoverText");
    hoverText.textContent = text;
}

function showOnlyActiveContextsClicked(event)
{
    var showOnlyActiveContextsCheckbox = document.getElementById("showOnlyActiveContextsButton");
    showOnlyActiveContexts = showOnlyActiveContextsCheckbox.checked;
    widget.setPreferenceForKey(showOnlyActiveContexts,
                                createInstancePreferenceKey("showOnlyActiveContexts"));
}


function includeChildrensTotalsInParentsClicked(event)
{
    var includeChildrensTotalsInParentsCheckbox = 
        document.getElementById("includeChildrensTotalsInParentsButton");
    includeChildrensTotalsInParents = includeChildrensTotalsInParentsCheckbox.checked;
    widget.setPreferenceForKey(includeChildrensTotalsInParents,
                                createInstancePreferenceKey("includeChildrensTotalsInParents"));
}

function launchOFClicked(event)
{
    widget.openApplication("com.omnigroup.OmniFocus");
}


if (window.widget) {
    // Sets up the handlers for dashboard events
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
    
    // These constants could be determined by querying appropriate elements in the widget,
    // but for a small number of them it seems simpler to just duplicate the information.
    const minBarWidthInPixels = 10; // Corresponds to 1 action
    const maxBarWidthInPixels = 185;
    const pixelsPerListRow = 16;
    const minimumVerticalSpace = 78;
	const leftBoundOfBarInPixels = 39;
    const minTopOfBottom = 25;
    const dividerBarOffset = 7;
    const hoverTextOffset = 13;
    const loadingStampHeight = 122;
    
    // Reserves space and initializes some globals for the widget.
    const omniFocusNotRunningResponse = "### NOT RUNNING ###";
    var scriptCommand = null;
    var showOnlyActiveContexts;
    var includeChildrensTotalsInParents;
    var loadStampAnimator = null;

    var listController = {
        _contextNames: ["loading…", "loading…", "loading…"],
        _taskCounts: [0,0,0],
        _depths: [0,1,0],
        _taskCountAtFullBarWidth: 10,
        // The List calls this method to find out how many rows should be in the list.
        numberOfRows: function() {
            return this._taskCounts.length;
        },
        // The List calls this method once for every row.
        prepareRow: function(rowElement, rowIndex, templateElements) {
            // templateElements contains references to all elements that have an id in the template row.
            // Ex: set the value of an element with id="label".
            templateElements.label.innerText = this._taskCounts[rowIndex];
            var pixelsPerTask = (maxBarWidthInPixels - minBarWidthInPixels) /
                                    (this._taskCountAtFullBarWidth - 1);
            var newWidth = minBarWidthInPixels + (this._taskCounts[rowIndex] - 1) * pixelsPerTask;
            templateElements.bar.style.width = newWidth + "px";
            templateElements.bar.style.left = 
                (this._depths[rowIndex] * minBarWidthInPixels + leftBoundOfBarInPixels) + "px";
            if (this._taskCounts[rowIndex] < 1) {
                templateElements.bar.style.opacity = 0.0;
            } else {
                templateElements.bar.style.opacity = 1.0;
            }
            // Grab the appropriate context name here, since the 'this' reference in the mouseover
            // handler is not bound to this listController object when the handler is invoked.
            var contextName = this._contextNames[rowIndex];

            // Assign a click event handler for the row.
            rowElement.onmouseover = function(event) {
                setHoverText(contextName);
            };
            rowElement.onmouseout = function(event) {
                setHoverText("");
            };
            rowElement.onclick = function(event) {
                tellOFtoShowContext(contextName)
            }
        },
        data: function(newScriptData) {
            // Some useful tidbits
            var list = document.getElementById("list");
            var listFader = function(a,c,s,f) {
                list.style.opacity = c;
            };
            // Need a variable that points back to this object for retrieving fields
            var self = this;

            // Updates listController data
            var oldRowCount = this._taskCounts.length;
            var lines = newScriptData.split('\r');
            var newContextNames = [];
            var newCounts = [];
            var newDepths = [];
            var maxWidth = 0;
            var nextIndex = 0;
            for(var i=0; i<lines.length; i+=3) {
                var name = lines[i];
                var count = parseInt(lines[i+1]);
                var depth = parseInt(lines[i+2]);
                // Leave in zero-count contexts if we're showing inactive contexts, or if parents
                // aren't counting their children.  In the later case we need the parents to anchor
                // the bar hierarchy.
                if (!showOnlyActiveContexts || !includeChildrensTotalsInParents || count > 0) {
                    newContextNames[nextIndex] = name;
                    newCounts[nextIndex] = count;
                    newDepths[nextIndex] = depth;
                    nextIndex++;
                    if (count+depth > maxWidth) {
                        maxWidth = count+depth;
                    }
                }
            }

            // Continuation that fades list back in quickly
            var reloadAndFadeIn = function() {
                list.object.reloadData();
                listFadeAnimator = new AppleAnimator(100, 13, 0.0, 1.0, listFader);
                listFadeAnimator.start();
            };

            // Continuation that updates fields and resizes widget if necessary
            var updateFieldsAndResize = function() {
                self._contextNames = newContextNames;
                self._taskCounts = newCounts;
                self._depths = newDepths;
                self._taskCountAtFullBarWidth = Math.max(maxWidth,1); // Avoid div by zero possibilities
                var rowCount = self._contextNames.length;

                if (rowCount == oldRowCount) {
                    // Skip the resizing, go right to next continuation
                    reloadAndFadeIn();
                } else {
                    var widgetFront = document.getElementById("front");
                    var oldWindowHeight = minimumVerticalSpace + pixelsPerListRow * oldRowCount;
                    var newWindowHeight = minimumVerticalSpace + pixelsPerListRow * rowCount;
                    var oldWindowWidth = 
                        parseInt(document.defaultView.getComputedStyle(widgetFront, null)
                            .getPropertyValue("width"));
                    // Need to make window extents larger before animating when growing the display
                    if (rowCount > oldRowCount) {
                        window.resizeTo(oldWindowWidth, newWindowHeight);
                    }
                
                    var resizeAnimator = new AppleAnimator(500,13);
                    // Main background
                    var background = document.getElementById("bodyBackground");
                    var oldHeight = background.offsetHeight;
                    var newHeight = rowCount * pixelsPerListRow;
                    var backgroundResizer = new AppleAnimation(oldHeight, newHeight, function(a, c, s, f) {
                        background.style.height = c + "px";
                    });
                    resizeAnimator.addAnimation(backgroundResizer);
                    // Loading stamp
                    var loadingStamp = document.getElementById("loadingStamp");
                    var oldStampTop = (oldWindowHeight - loadingStampHeight) / 2.0;
                    var newStampTop = (newWindowHeight - loadingStampHeight) / 2.0;
                    var loadingStampMover = 
                        new AppleAnimation(oldStampTop, newStampTop, function(a, c, s, f) {
                            loadingStamp.style.top = c + "px";
                        });
                    resizeAnimator.addAnimation(loadingStampMover);
                    // Bottom
                    var bottom = document.getElementById("bottomRectangleShape");
                    var dividerBar = document.getElementById("dividerBar");
                    var hoverText = document.getElementById("hoverText");
                    var oldTop = 
                        parseInt(document.defaultView.getComputedStyle(bottom,null).getPropertyValue("top"));
                    var newTop = minTopOfBottom + rowCount * pixelsPerListRow;
                    var bottomMover = new AppleAnimation(oldTop, newTop, function(a, c, s, f) {
                        bottom.style.top = c + "px";
                        dividerBar.style.top = (c + dividerBarOffset) + "px";
                        hoverText.style.top = (c + hoverTextOffset) + "px";
                    });
                    resizeAnimator.addAnimation(bottomMover);
                    
                    if (rowCount < oldRowCount) {
                        // Need to make window extents smaller after animating when shrinking the display
                        resizeAnimator.oncomplete = function() {
                            window.resizeTo(oldWindowWidth, newWindowHeight);
                            reloadAndFadeIn();
                        }
                    } else {
                        resizeAnimator.oncomplete = reloadAndFadeIn;
                    }
                    resizeAnimator.start();
                }
            }
            
            // Kicks off the animation chain...
            // Fades list out quickly
            var currentOpacity = +list.style.opacity;
            var listFadeAnimator = new AppleAnimator(350, 13, currentOpacity, 0.0, listFader);
            listFadeAnimator.oncomplete = updateFieldsAndResize;
            listFadeAnimator.start();
        }
    };
}
